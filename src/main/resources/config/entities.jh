
/**
 * Represents any XM entity like Account, Product Offering, Product, Order, Handling,
 * Resource, Task, Agreement, Contact, Organization, Price, Channel, Segment and other.
 */
entity XmEntity {
    /**
     * Additional lateral identification for this entity could be defined by template
     * Example: PO-1 for Product Offering, e-Mail or MSISDN for account, external Id
     * for Order etc).
     * Key is not full unique entity identification. Few entities could have one key,
     * but only one entity could be addressable at one time, as other should be ended
     * by endDate property.
     */
    key String required,
    /**
     * Key reference to the configured Entity Type. Convention is capital letter with
     * dash '-'.
     * Example: ACCOUNT, PRODUCT-OFFERING, PRICE etc.
     * Entity Sub Types could be separated by dot '.'. Convention is same as for Type.
     * Example: ACCOUNT.ADMIN, ACCOUNT.USER, ACCOUNT.PARTNER for type ACCOUNT or
     * PRODUCT-OFFERING.CAMPAIGN, PRODUCT-OFFERING.RATE-PLAN etc.
     */
    typeKey String required,
    /**
     * Key reference to the configured Entity State. Entity State matrix related to the
     * pair of Entity Type. Convention is same as for type (ACTIVE, ORDERED, PRODUCTION,
     * CANCELED, CANCELED.MANUAL etc).
     */
    stateKey String,
    /**
     * This is i18n name of Entity.
     * TODO: change data type
     */
    name String required,
    /**
     * Start date.
     */
    startDate Instant required,
    /**
     * Update date.
     */
    updateDate Instant required,
    /**
     * End date.
     */
    endDate Instant,
    /**
     * Relative link to the avatar image. It should support to use additional parameters
     * to identify avatar size for different views.
     */
    avatarUrl String,
    /**
     * This field describe instance of entity and is not i18n. It could be a big text.
     * Markdown or HTML format should be supported.
     */
    description String,
    /**
     * Data property represents entity fields as JSON structure. Fields specified by
     * Formly and could use them for form building.
     */
    data String,
    /**
     * Field is used to mark entities as deleted without physical deletion.
     */
    removed Boolean
}

/**
 * Represents any XM entity file attachment. It could be image, zip archive, pdf
 * document or other file formats (List of available file formats should be
 * configured).
 * Files should be verified on:
 * - size
 * - zip bombs
 * - viruses
 */
entity Attachment {
    /**
     * String typeKey with tree-like structure.
     */
    typeKey String required,
    /**
     * Attachment name
     */
    name String required,
    /**
     * Content retrieving URL
     */
    contentUrl String,
    /**
     * Content description
     */
    description String,
    /**
     * Start date
     */
    startDate Instant required,
    /**
     * End date
     */
    endDate Instant,
    /**
     * Content type
     */
    valueContentType String,
    /**
     * Content size in bytes
     */
    valueContentSize Long
}
/**
 * Represents Attachment content. Content can be extracted separately from the attachment.
 */
entity Content {
    /**
     * Content value as byte array
     */
    value AnyBlob required
}
/**
 * Represents calendar instance related to XmEntity.
 */
entity Calendar {
    /**
     * String typeKey with tree-like structure.
     */
    typeKey String required,
    /**
     * Calendar name.
     */
    name String required,
    /**
     * Calendar description
     */
    description String,
    /**
     * Start date
     */
    startDate Instant required,
    /**
     * End date
     */
    endDate Instant
}

entity Event {
    /**
     * String typeKey with tree-like structure.
     */
    typeKey String,
    /**
     * Configuration for event repetition
     */
    repeatRuleKey String,
    /**
     * Event title
     */
    title String required,
    /**
     * Event description
     */
    description String,
    /**
     * Start date
     */
    startDate Instant,
    /**
     * End date
     */
    endDate Instant
}

entity Comment {
    /**
     * Comment author user key
     */
    userKey String required
    /**
     * Message content
     */
    message String,
    /**
     * Entry date
     */
    entryDate Instant
}

/**
 * Bidirectional link between two XmEntites.
 */
entity Link {
    /**
     * String typeKey with tree-like structure.
     */
    typeKey String required,
    /**
     * Link name
     */
    name String,
    /**
     * Link description
     */
    description String,
    /**
     * Start date
     */
    startDate Instant required,
    /**
     * End date
     */
    endDate Instant
}

entity Location {
    /**
     * String typeKey with tree-like structure.
     */
    typeKey String required,
    /**
     * Country code.
     */
    countryKey String,
    /**
     * GPS longityde in decimal format
     */
    longitude Double,
    /**
     * GPS latitude in decimal format
     */
    latitude Double,
    /**
     * Full address name
     */
    name String,
    /**
     * Street and number, P.O. box, c/o
     */
    addressLine1 String,
    /**
     * Apartment, suite, unit, building, floor, etc.
     */
    addressLine2 String,
    /**
     * City name
     */
    city String,
    /**
     * State, Province, Region
     */
    region String,
    /**
     * ZIP code
     */
    zip String
}

entity Rating {
    /**
     * String typeKey with tree-like structure.
     */
    typeKey String required,
    /**
     * Rating value
     */
    value Double,
    /**
     * Start date
     */
    startDate Instant required,
    /**
     * End date
     */
    endDate Instant
}

entity Vote {
    /**
     * Vote author user key
     */
    userKey String required,
    /**
     * Vote value
     */
    value Double required,
    /**
     * Vote message
     */
    message String,
    /**
     * Entry date
     */
    entryDate Instant required
}

/**
 * Represents tags associated with the XmEntity.
 */
entity Tag {
    /**
     * String typeKey with tree-like structure.
     */
    typeKey String required,
    /**
     * Searchable Tag's name
     */
    name String,
    /**
     * Start date
     */
    startDate Instant required
}

/**
 * Represents function context with result of function execution.
 */
entity FunctionContext {
    /**
     * Function context alphanumeric alias.
     */
    key String required,
    /**
     * String typeKey with tree-like structure.
     */
    typeKey String required,
    /**
     * Function context description.
     */
    description String,
    /**
     * Start date.
     */
    startDate Instant required,
    /**
     * Update date.
     */
    updateDate Instant,
    /**
     * End date.
     */
    endDate Instant,
    /**
     * Function context execution related data in JSON format.
     * On DTO level data type should be Map<String,Object>
     */
    data String
}

/**
 * Represents User's profile on Entity microservice.
 * Contains relation to XmEntity by foreign key. Profile will be creatid in LEP code as a reaction to event for new user registration.
 */
entity Profile {
    /**
     * User identifier from UAA.
     */
    userKey String required
}

relationship OneToOne {
    Attachment{content} to Content,
    Profile{xmentity required} to XmEntity
}

relationship OneToMany {
    XmEntity{attachments} to Attachment{xmEntity required},
    XmEntity{calendars} to Calendar{xmEntity required},
    XmEntity{locations} to Location{xmEntity required},
    XmEntity{ratings} to Rating{xmEntity required},
    XmEntity{tags} to Tag{xmEntity required},
    XmEntity{comments} to Comment{xmEntity required},
    XmEntity{votes} to Vote{xmEntity required},
    XmEntity{sources} to Link{target required},
    XmEntity{targets} to Link{source required},
    XmEntity{functionContexts} to FunctionContext{xmEntity},

    XmEntity to Event{assigned},

    Calendar{events} to Event,
    Comment{replies} to Comment,
    Rating{votes} to Vote
}

service XmEntity with serviceClass
service Rating with serviceClass
service Link with serviceClass
service Calendar with serviceClass
service Comment with serviceClass
service Attachment with serviceClass
service FunctionContext with serviceClass
service Event with serviceClass
service Tag with serviceClass
service Vote with serviceClass

paginate XmEntity with pager
paginate Vote with pager
paginate Link with pager
paginate Comment with pager

microservice * with 'entity'
search * with elasticsearch except Content
