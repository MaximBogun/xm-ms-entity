package com.icthh.xm.ms.entity.lep;

import com.icthh.lep.api.ContextScopes;
import com.icthh.lep.api.LepInvocationCauseException;
import com.icthh.lep.api.LepManagerService;
import com.icthh.lep.api.LepMethod;
import com.icthh.lep.api.ScopedContext;
import com.icthh.lep.commons.UrlLepResourceKey;
import com.icthh.lep.groovy.GroovyScriptRunner;
import groovy.lang.Binding;
import lombok.experimental.UtilityClass;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Supplier;

/**
 * The {@link LepScriptUtils} class.
 */
@UtilityClass
@SuppressWarnings("squid:S1118") // private constructor generated by lombok
final class LepScriptUtils {

    static Object executeScript(UrlLepResourceKey scriptResourceKey,
                                ProceedingLep proceedingLep, // can be null
                                LepMethod method,
                                LepManagerService managerService,
                                Supplier<GroovyScriptRunner> resourceExecutorSupplier,
                                Object... overrodeArgValues) throws LepInvocationCauseException {
        GroovyScriptRunner runner = resourceExecutorSupplier.get();
        String scriptName = runner.getResourceKeyMapper().map(scriptResourceKey);
        Binding binding = buildBinding(scriptResourceKey, managerService, method, proceedingLep, overrodeArgValues);

        return runner.runScript(scriptResourceKey, method, managerService, scriptName, binding);
    }

    // overrodeArgValues - can be null
    private static Binding buildBinding(UrlLepResourceKey scriptResourceKey,
                                        LepManagerService managerService,
                                        LepMethod method,
                                        ProceedingLep proceedingLep,
                                        Object... overrodeArgValues) {
        boolean isOverrodeArgs = overrodeArgValues != null && overrodeArgValues.length > 0;
        if (isOverrodeArgs) {
            int actual = overrodeArgValues.length;
            int expected = method.getMethodSignature().getParameterTypes().length;
            if (actual != expected) {
                throw new IllegalArgumentException("When calling LEP resource: " + scriptResourceKey
                                                       + ", overrode method argument values "
                                                       + "count doesn't corresponds method signature (expected: "
                                                       + expected + ", actual: " + actual + ")");
            }
        }

        Map<String, Object> lepContext = new LinkedHashMap<>();
        Binding binding = new Binding();

        // add execution context values
        ScopedContext executionContext = managerService.getContext(ContextScopes.EXECUTION);
        if (executionContext != null) {
            executionContext.getValues().forEach(lepContext::put);
        }

        // add method arg values
        final String[] parameterNames = method.getMethodSignature().getParameterNames();
        final Object[] methodArgValues = isOverrodeArgs ? overrodeArgValues : method.getMethodArgValues();
        Map<String, Object> inVars = new LinkedHashMap<>(parameterNames.length);
        for (int i = 0; i < parameterNames.length; i++) {
            String paramName = parameterNames[i];
            Object paramValue = methodArgValues[i];

            inVars.put(paramName, paramValue);
        }
        lepContext.put(XmLepScriptConstants.BINDING_KEY_IN_ARGS, inVars);

        // add proceedingLep support
        lepContext.put(XmLepScriptConstants.BINDING_KEY_LEP, proceedingLep);

        binding.setVariable(XmLepScriptConstants.BINDING_VAR_LEP_SCRIPT_CONTEXT, lepContext);
        return binding;
    }

}
