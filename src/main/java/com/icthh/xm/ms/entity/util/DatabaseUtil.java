package com.icthh.xm.ms.entity.util;

import static com.icthh.xm.commons.tenant.TenantContextUtils.assertTenantKeyValid;
import static com.icthh.xm.ms.entity.config.Constants.DDL_CREATE_SCHEMA;

import com.icthh.xm.ms.entity.domain.XmEntity;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.function.Consumer;
import javax.sql.DataSource;

import lombok.experimental.UtilityClass;
import lombok.extern.slf4j.Slf4j;
import org.springframework.transaction.support.TransactionSynchronization;
import org.springframework.transaction.support.TransactionSynchronizationAdapter;
import org.springframework.transaction.support.TransactionSynchronizationManager;

/**
 * Utility for database operations.
 */
@Slf4j
@UtilityClass
@SuppressWarnings("squid:S1118") // private constructor generated by lombok
public final class DatabaseUtil {

    /**
     * Creates new database scheme.
     *
     * @param dataSource the datasource
     * @param name       schema name
     */
    public static void createSchema(DataSource dataSource, String name) {
        assertTenantKeyValid(name);
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            statement.executeUpdate(String.format(DDL_CREATE_SCHEMA, name));
        } catch (SQLException e) {
            throw new RuntimeException("Can not connect to database", e);
        }
    }

    public static void runAfterTransaction(XmEntity xmEntity, Consumer<XmEntity> task) {
        TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter() {
            @Override
            public void afterCompletion(int status) {
                super.afterCompletion(status);
                if (status == STATUS_COMMITTED) {
                    try {
                        task.accept(xmEntity);
                    } catch (Exception e) {
                        log.error("Error in afterCompletion stage during transaction synchronization for entity: {}",
                                  xmEntity, e);
                    }
                }
            }
        });
    }
}
