package com.icthh.xm.ms.entity.config;

import com.google.common.io.ByteStreams;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.security.KeyFactory;
import java.security.KeyStore;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Security;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.xml.bind.DatatypeConverter;
import org.apache.http.client.HttpClient;
import org.apache.http.conn.ssl.AllowAllHostnameVerifier;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.ssl.SSLContexts;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

public class ConnectionFactoryCreator {

    private final SSLContext context;

    public ConnectionFactoryCreator(SSLContext context) {
        this.context = context;
    }

    public SSLSocketFactory getSocketFactory() throws Exception {

        byte[] baseKey = Base64.getDecoder().decode(
            "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ1hhc0dtc2x2N3VyNVcKaGNWRmx0RnNRaWd5NEV0RVFwai92eVlDZDZUUkhlV2s5N3FBdCtWOW04d2hRWFNYdy85Q3VzamtjWFlkZnNoTwpwcHNwc2tLZFFWWWlDSVZXR1ZFZ0RtOHp2T3d3NWJ4Nk5ZYzIrZnRuVzdrUVN0djBFWGVKODJFN01KOWppVEM2Cis5MHZYbHhUREM5YmplNzQ0MHJCS2FsOEVXS2VlTUJheTZQdnZaTzhkRmdxM0pBUmZIRm40c0RDb2RzMEJsZ0kKa01uK3hoendZQVpVUEhrdE5jYlNQeGxrQi9yQVZGSzRWdVRKeXVyWE5kRG4zbGwrR2phd0Y1UlRoM3phUVYrbQp1aUhad0FPY2pPRG9nT3dXd3B6SjVBQXJWYmp5eUk3OFR0RlJMa21iMWg5M0NMaDY5VVBPc1BJZ3JaaDRYK2FGCnFuajBPVHR0QWdNQkFBRUNnZ0VBSWNGSTNuS1Frdk8wanZGUFl3NFdMYjRwMi8yb2lkVVc2cHlnU3BpRmc2RFkKbXdnbTZaOFZhQVVkWXFTRzYzWmtKMm9nY3R6Z2FmN2poTFViamhZUlI2RlRKRThsK21XMmNpRUZwVkVPam5BSQpybTNVY09zVm9wc09ESlhEcHd0bHpMa1hDZXp5KzJ1UUUzOG1kZkxoUGhwUFRHZTl5SHBUSmZDMXVkVGVXVmxXCkxmVU9HYjc2SGJMK2U3ZWtjblF5S2RzalhZSXF5U0JreGp3UkV2ZFAyMmZMcVJVN1B0aGZWblVBTEcvd0VRYXIKQU1TSEErQXFTNGtod05INC9QQkZTUk1DWHBKVFZaUjVvdWtlN1NwNi93WGRxZk1ISmgyUVpRUG1vL213bWFFMAp4a3EvMitraEFLTnpDcWhmaFl3UDJIdVJFby85WGRVSHJtNm1rMVdUUVFLQmdRREhueDF4Y3N5T0k3UXhPSlN6CnNEQ3RGdXBJTGtsUzdSc2VTSHE3Ni9Gb080MzNhWU5BZUpJQnRSMUkydDZHdURVVGlJclBPbU13NHNIL25qcTAKSmxCR3lqS1cwVXB5RTJZN1gxSENWRldmcnNOazdPMjhadXVQUEQvaUdQV1YyWlR4S3RySENaOG5GT3ZmVDJYVwpMdVVtWUxFVTN5cml2bU5XVFpXaStnTDFaUUtCZ1FEQ0xtVDgvd0g4WGozc2NkY25wMmloK01hZHlRK1pmd29aCi9UQmlzQnFSOXZTZzVaZGwxM0lTM095MkRWQVFQa0MvdEdudHJDZnhRcVdPNFJJLzZJQWhKYUtnTVU3OGpPVlIKZjBGZkdIa0FSV0lYVFpvYkdJRmxNSHpXc0RYTEZCK2lVQXJWZmE5Ly9xZDJIeGg5ZWJ1MEU0OVlIcDlwbk8yQQp0Q3NKVVYxeGFRS0JnRVF6bWNTait6MW85MnlGcjFDQkZ2QmNUdWtnWDA3azBZb1VLMUsvTnZoc3VJRmFYRXlQCnBSck9QVlloNlR0UC9scFJJVlBSMkFmZ3dYVkxJelZmamJmUjUxemQzcmlBNWtITXZFdFBzdjFlb1VWL0tXNWcKSDRVTmlhbis2eEVxaUplcEU1eERMa3dVK3MyTisvWWtpWWdHS3hvOWNSS05CN1Y1eG5FclNBMTlBb0dBRllYTwo2N3ZZSElEVm5EK0IrWU0wdGI4OVJIL2ttcjdaLzhkd2RYL1BjaDVOUHdnem43WWhqcld1QnYreXdCb21VeGxNCkpHdlFnWTFCakhTbDhTOTBCRGlIcmZuSkozVDJkZklFN09WcGcvNHN3U2g0ekVnTEQ0d3dTaHQ5MnVTQUhSMkMKRmVlNGJCZHR1RW42RE81UlA4UnJQdmtsOGk3U3BGRlQ4OVJ3NXdFQ2dZRUFvNHMxZzJUczF0NVZRT25FRnNZdwpCU2d2SDlDMDlCT2poMHdyQ1oxNGFIUkw3SWFRekhUU29iUWlGYjl5NUljV1dTUllWanRaNS9yd243bnliQTBICnl3UUwvQ2tYcDVjU1lqbUY0R2krM2oxTHhCd0xHUkJEOUVWZUgwOGswcWhCTnNMQ29PVEd2R3NXNXlEUGIwbmEKUzBpaENHZ3JhN3Nkc05uMVBsbzFqbDA9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K");
        byte[] baseCert = Base64.getDecoder().decode(
            "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVJRENDQXdpZ0F3SUJBZ0lRT2tEU21tdi81RXNuTFlveGxZYW5SekFOQmdrcWhraUc5dzBCQVFzRkFEQlUKTVFzd0NRWURWUVFHRXdKVlV6RVVNQklHQTFVRUNnd0xRVXhEVEVWQlVpQk1URU14Q1RBSEJnTlZCQWdNQURFWgpNQmNHQTFVRUF3d1FTRU1nUkdWMklGTjFZaUJEUVNCVE1URUpNQWNHQTFVRUJ3d0FNQjRYRFRJeE1ETXlNekF5Ck1qRXpNMW9YRFRJek1ETXlNekF6TWpFek0xb3dZREVMTUFrR0ExVUVCaE1DVlZNeEVEQU9CZ05WQkFvTUIwTnMKWVhKcGRIa3hFREFPQmdOVkJBc01CME5zWVhKcGRIa3hMVEFyQmdOVkJBTU1KRGhoT0RrNE5UQmtMV0U0WXpndApOR1JsWlMxaFlqQmxMVGhrWVRWaU56WmlZamRtWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQUpkcXdhYXlXL3U2dmxhRnhVV1cwV3hDS0RMZ1MwUkNtUCsvSmdKM3BORWQ1YVQzdW9DMzVYMmIKekNGQmRKZkQvMEs2eU9SeGRoMSt5RTZtbXlteVFwMUJWaUlJaFZZWlVTQU9iek84N0REbHZIbzFoemI1KzJkYgp1UkJLMi9RUmQ0bnpZVHN3bjJPSk1McjczUzllWEZNTUwxdU43dmpqU3NFcHFYd1JZcDU0d0ZyTG8rKzlrN3gwCldDcmNrQkY4Y1dmaXdNS2gyelFHV0FpUXlmN0dIUEJnQmxROGVTMDF4dEkvR1dRSCtzQlVVcmhXNU1uSzZ0YzEKME9mZVdYNGFOckFYbEZPSGZOcEJYNmE2SWRuQUE1eU00T2lBN0JiQ25NbmtBQ3RWdVBMSWp2eE8wVkV1U1p2VwpIM2NJdUhyMVE4Nnc4aUN0bUhoZjVvV3FlUFE1TzIwQ0F3RUFBYU9CNFRDQjNqQUpCZ05WSFJNRUFqQUFNQjhHCkExVWRJd1FZTUJhQUZDUHlIU0pFbHlMaGZPWlZPendhcnhWZGZjMW9NQjBHQTFVZERnUVdCQlJRT0pMSjF3eFMKVWFLMXByVWxQV0N5cEpmdjV6QU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSApBd0VHQ0NzR0FRVUZCd01DTUdJR0ExVWRId1JiTUZrd1Y2QlZvRk9HVVdoMGRIQTZMeTl6ZFdJdFkyRXRZM0pzCkxtUmxkaTVvWXk1amJHVmhjbTFsTG1OdmJTOWpjbXd2TkRBNU4yWmlaRFV0WkdFMU5TMDBaakZqTFRobE16WXQKWlRjMk1ETXlabVl6TjJKaExtTnliREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBRm5YemdLTVp4V2NTWUlGRQpQTTRDVURyTHhCQzg3L2w1N3BTK3d2SzVhTGdWWWhBdFVjMWpNK2NlWGUwc2ZudkNmeFJyWENlY2F3Z0N4OE1hCjFtKzlMUndtSEVYcml3RGpnTHpUV3N4UHVDK0JiK0pyTWtUcFByZDlPRmF2SXdSNC9ZUDRFMy9idWZkaW1jbjkKV1lod1dKSGpLSFZHMXF0UG9ValJkcGpjTzVtMWFBSS9kNXFVd3NFTm8rdHd3ajM3b0lKQkpqTzdtT281aGdFWQpvZnQ0eW9kSzBtWHFsUmt2ZjBobUg3WXdNb2xxS1RxOElJaDFxRVhFMGJTNUt4SHF2YXNPYjk4L3dDcEpFeVRiCnBHV0FmNWtuSGhhS3B3ZEoyVG5ON1BDMjRzSkozYU9CWlJnM3ZDdnNQNmozak5TZWt6MmxuWkVvcUF4b3pXT0oKQ3lLS21RPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRTdqQ0NBdGFnQXdJQkFnSVFjL0pUVzFWZHhham0relVtbk82dkN6QU5CZ2txaGtpRzl3MEJBUXNGQURCSwpNUXN3Q1FZRFZRUUdFd0pWVXpFVU1CSUdBMVVFQ2d3TFFVeERURVZCVWlCTVRFTXhKVEFqQmdOVkJBTU1IRUZNClEweEZRVklnVEV4RElFWmxaQ0JTYjI5MElESXdNakFnVWpFd0hoY05NakF4TWpBek1UTTFNVE16V2hjTk1qTXgKTWpBek1UUTFNVE16V2pCVU1Rc3dDUVlEVlFRR0V3SlZVekVVTUJJR0ExVUVDZ3dMUVV4RFRFVkJVaUJNVEVNeApDVEFIQmdOVkJBZ01BREVaTUJjR0ExVUVBd3dRU0VNZ1JHVjJJRk4xWWlCRFFTQlRNVEVKTUFjR0ExVUVCd3dBCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdWpjUXZUczdRRElIK1g2cXp5OGgKeWR0TjhER0JDSzBPY0xnSWs5aW1YRlVUTXhPK0dBRjNxQ0tPUnpMKy9LVEF4Tmp0VE5OdXNCWnYvVW5vYkx6bgpGMUR1V1lCdkFzbklIZHJDbUdVYzVkbDVCQlpZaEx6Szh6N0tXTWphL0Z6b0dTdU1UNEFSZEF2MERiQjl4U2R1CmY5MWQzNGdVNlFmR0ZJbkxDenFuZ3FZZ2Z4NXVHeXJwc3lNNko1T2oxN2RzYkpRSmRORm42SjNOR3dKSDVkc1cKK1AwKzcrTXM0NjlXcXBSRTZ5RDBUU2JYVTFTek5IT09HSEI0cXRTYXpzblI5RXZaQnJsYXFGbENnYlMzakZJagpGM1FBcG5IM0NZbEJHblA5N1BSYU9xWVcxUHcyMmtiWUJ1Z3NzYTVzM0c4MVhKUXZxOWFtV3l3Z1pac3FsSGNyCmpRSURBUUFCbzRIRk1JSENNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3SHdZRFZSMGpCQmd3Rm9BVXpPbkgKcTlHTXdNOUxkMmx6YlBmbEIxNDNYTUV3SFFZRFZSME9CQllFRkNQeUhTSkVseUxoZk9aVk96d2FyeFZkZmMxbwpNQTRHQTFVZER3RUIvd1FFQXdJQmhqQmNCZ05WSFI4RVZUQlRNRkdnVDZCTmhrdG9kSFJ3T2k4dmNtOXZkQzFqCllTMWpjbXd1WTJ4bFlYSnRaUzVqYjIwdlkzSnNMMkUxTldKbE5EQmlMVEkxTVRZdE5EQTRaQzA1WXpBMExXTTUKTjJGak0ySXpZalJqWmk1amNtd3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBQThwd0tjbUlFSXJyL3VQRndZWAp4WGxDZkJHL1BBcWVtNU4wcW1ZL2dMMWo1NGx0dDZYbkUyMVVuV1Uxbmd3dm1USXBIekd1UnY2TVR1THluaGd6Cmg3dUFETVlsWDR1VlliRHRyK3pJcG41cGYyYmhnMDU1Yk1PVWN1Qk9WNkVjZjNuNDJ3bXZUQmZhYmc4eGhsczIKdjNGcmhmNWpZMlFCOWJtT1BKOU5mQVhMVGtrZE1nMjUwSHNsTGptT3hsa1VFcjlmSHdFUEk1aE1Xdk9WSmtPaApGKzhrL0w3RDFqSlVuVnVGeFZpVkxKRnVseld2aXEvSnVCSzV0dlpHVU9Kc2Y3WUhiTlBpZC9rSCtiU0ptNllQCmIwaEM2YmZGcHl6QjQyalBNa1p1RjRzZVVnQUxHNE4veUhrWHdFSUR1M0FLblo5N2NFc01idzE0VTdqWDR6U2EKWm9uSWlqNGh5TFZDN2ZzcG5ZeFRxMWlWcWhiWDJrN0UrMkhEc3NsNTQyR2l3dlE0NmU3NXM2ZEpQdTJLejJuLwp1YzFrZWxlNm1LYXkwUWFJM1UrZThLTFo5SWx0bWNQeS9TR0wyN1NVYitldXpEdXVINzNIR3F6ckhPeDdTQVZJCnlhNHFxdGRISHk5d2JCejE2Y0l4T3lnU0JkZ2NKbERGRnNTM0RhNnhaOW5qb2I4cU5VdjFEd240bFkxWXhIMWkKVXNydFNrMWRST3ptblZtVE1rakttcHgxWmE5NG5YTmFTNW9TbHVSR0swc2lRODBCZFRMVks2SjBhcVdidWtyQwpoc3BpeEM3UU1yT0owSUlWOWt4dTdta3B6RTBKaDdmR1pVVmpNelpMb2dodExpZUUySzlMbVFkZXhWOVhtVVZuCjdITXVwYzNiemFkTGtxYWtxc1YzMEhTQwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGWVRDQ0EwbWdBd0lCQWdJUkFKYU1lRmhpWkhaUDJQQ1B4Q044NFdFd0RRWUpLb1pJaHZjTkFRRU1CUUF3ClNqRUxNQWtHQTFVRUJoTUNWVk14RkRBU0JnTlZCQW9NQzBGTVEweEZRVklnVEV4RE1TVXdJd1lEVlFRRERCeEIKVEVOTVJVRlNJRXhNUXlCR1pXUWdVbTl2ZENBeU1ESXdJRkl4TUI0WERUSXdNRE15TlRFM05EVXhPRm9YRFRNdwpNRE15TlRFNE5EVXhPRm93U2pFTE1Ba0dBMVVFQmhNQ1ZWTXhGREFTQmdOVkJBb01DMEZNUTB4RlFWSWdURXhECk1TVXdJd1lEVlFRRERCeEJURU5NUlVGU0lFeE1ReUJHWldRZ1VtOXZkQ0F5TURJd0lGSXhNSUlDSWpBTkJna3EKaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF3emR5Z09yNHpwRFdFdEFGblJ1aGRZa3JhUkZDNlJIeAprejk1dDhJOVV3NTNLR211NVJYTkhzYkx5RWliQzVFVGlKQ2JiUDZaM1UwNGxraHFIZU9TSmxPTm5nUm02ZUUxCnRCYVROZVlDQ29FMGs4MnpmVmtUSnNnbnJzL0tZMzVnVERWNzN4aHQ1K0p5MGdWVFNzVnJwc1orTWFyU0paZ0YKcjhyRXhEODgxWlc0NUVYSlFKd0VkcUd0WVVBUnJXZDVESjFPdis4ZWtLdXpGTnFDREsrZEdTTHBvdUNId1I2dQpnMHMxUDRKOWZzOUpJVElJVzlXSWlUUGJQSXpZSnJLcXpVTDk0em52bE0zOWZTN0dQR2thV29abCtma2pmb1pUClF2cFpIYWVXZDdpNmIyQjIyZVg3ckk3Y1BRYU1qUXZhK1Q5ZWdUdGVEektMcktEOTB0ZFd6U3JKT0NnYXlZdUsKNkkvSVlyUkpPSG1CdDVGWC80NjhzRVYrOHZha2VBYnovbEtPRlVnSWFvWEpVUjlHcWNoTklFRlErRnpJVlRwLwpsckNMMUY1YUtxT29xZmxQdkI5NVhtTzBhTCtJdkEvem5qaVR1c0ZId3BLLzNMNDlCeWhLK1ZZeDgvankzYUc4ClN6Yk5SeFVMTlljcndMZXlQd1NHQU9VcHNXVmxDblV0dk5LNW5aT2xQMG9LcHVBRldXM3FMbXByQmpCUkxZZG4KejZJcVRGdXdBVW5QNUlRMUtVamQ1MnJzd01UbWh0ZnE2amZndG1TVlo5MjlCejVMUTFML3lVVTA2emdWYjJRawpLZ1pkL3lzM0FUUVhNMVY1Z1Vvem02dFh0RGhvUCtwMm5leXBNdyt4MHZVOWpyRzFoM29EKzhkT1VaV2RQYmlJCjE3ZDBLN21OWjdVQ0F3RUFBYU5DTUVBd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVXpPbkgKcTlHTXdNOUxkMmx6YlBmbEIxNDNYTUV3RGdZRFZSMFBBUUgvQkFRREFnR0dNQTBHQ1NxR1NJYjNEUUVCREFVQQpBNElDQVFDVHg1MkZ3NGYzRlBISldGMVpwZzVsYjZxOGtsN0tZdGNKZlZVQnJ1Ky9uOG5MWTNKRHdOaWY5RHc1ClFvUHhKUUd3RTZUVS9TbU9hNldUR1NMM0E5NkJpTFpxU2R2Uk1iS1J1c0Y1UFFxNXduRUhsNGZhT1dEaVZSM04KMXJNS2VjUFhvTDdZQ2YvbTdvRUc5NTlRazV4TWdUcGtlbTBkS1grTkVyd0phOWlvWE1WWExSU2lYdHRaajNxRwpUVERPSjYyM3RzQ0pZcWdzbWJocCt5NUtxRmQwS3hGYzY0TmpFOC9sTjd0Z3VadGtTRGtZak1pd2JnaEFNRnFDCmcrM2RBM0FuWmQzblBTQWlQbW9XaHgxcnhqcTZ5UUpLQjU1Z0hMZ3NEMVB3SXd1TndVOXdYaTJ1UFU1QUFNalkKd1I1YnJBaC93L3Z1dWxseTdSUFc0SW5TdWdxdis4TVRxYjlQaHNZU0RQZDM3bFlXQkpVQzdLS0lTdHVHenQyVQpzbVhvQUM1SXVHcGJrM0FyMCtreDNYaGgzWVpvV3dtN0QvWGoxMmZKeDRDTENsdnJDUDY5a1g5bWpEamZqRG00CjhXNmthd0JxZjFZWUN4ZWFKVjNhdFM2NGozZ3NvWWk2N0k2TEJVbHdzNjNnOWdvUE1MMCtxcUhtdkhKbU82eXUKRmh3UWkvU3krQytSQjBiN0hBQmxnQmV0aS9OdTdEbGptMWhaaHdCeU0vcFlCMk5tMlNlMkVjZFlaengxWVhtdgptRHRhMnVJcS9oYlpuZHlkeE9adFp1R08wWVBEZ3oyeitiUndEdmpaNjJidGNETVlOWitRVCtIbE5WcXpYcHBmClowbExtZ2NaVGhpQkt5Q0pFbE1JVXdYS0xWeVkxY3FsalFyZWNHY0czdmhOWWJXUkZnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=");

        byte[] certBytes = parseDERFromPEM(baseCert, "-----BEGIN CERTIFICATE-----", "-----END CERTIFICATE-----");
        byte[] keyBytes = parseDERFromPEM(baseKey, "-----BEGIN PRIVATE KEY-----", "-----END PRIVATE KEY-----");

        X509Certificate cert = generateCertificateFromDER(certBytes);

        PrivateKey key = generatePrivateKeyFromDER(keyBytes);

        KeyStore keystore = KeyStore.getInstance("JKS");
        keystore.load(null);
        keystore.setCertificateEntry("cert-alias", cert);
        keystore.setKeyEntry("key-alias", key, "".toCharArray(), new Certificate[]{cert});

        KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
        kmf.init(keystore, "".toCharArray());

        KeyManager[] km = kmf.getKeyManagers();

        context.init(km, null, null);

        return context.getSocketFactory();
    }

    private byte[] parseDERFromPEM(byte[] pem, String beginDelimiter, String endDelimiter) {
        String data = new String(pem);
        String[] tokens = data.split(beginDelimiter);
        tokens = tokens[1].split(endDelimiter);
        return DatatypeConverter.parseBase64Binary(tokens[0]);
    }

    private PrivateKey generatePrivateKeyFromDER(byte[] keyBytes)
        throws InvalidKeySpecException, NoSuchAlgorithmException {
        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
        KeyFactory factory = KeyFactory.getInstance("RSA");
        return factory.generatePrivate(spec);
    }

    private X509Certificate generateCertificateFromDER(byte[] certBytes) throws CertificateException {
        CertificateFactory factory = CertificateFactory.getInstance("X.509");
        return (X509Certificate) factory.generateCertificate(new ByteArrayInputStream(certBytes));
    }


    public RestTemplate restTemplate() throws Exception {
        SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(null, new TrustSelfSignedStrategy())
            .build();

        CloseableHttpClient build = HttpClientBuilder.create().setSSLContext(sslContext)
            .setSSLSocketFactory(new SSLConnectionSocketFactory(getSocketFactory(), new NoopHostnameVerifier()))
            .build();

        HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(build);

        return new RestTemplate(requestFactory);
    }
}
