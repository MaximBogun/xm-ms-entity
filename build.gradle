import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.2"
        classpath "org.ajoberstar:grgit:${grgit_version}"
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id 'net.saliman.properties' version '1.4.6'
    id "org.sonarqube" version "2.6.2"
    id "net.ltgt.apt-eclipse" version "0.19"
    id "net.ltgt.apt-idea" version "0.19"
    id "net.ltgt.apt" version "0.19"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

apply from: 'gradle/git.gradle'
apply plugin: 'groovy'
apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8
// Until JHipster supports JDK 9
assert System.properties['java.specification.version'] == '1.8'

apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'propdeps'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
dependencyManagement {
  imports {
    mavenBom 'io.github.jhipster:jhipster-dependencies:' + jhipster_dependencies_version
    //jhipster-needle-gradle-dependency-management - JHipster will add additional dependencies management here
  }
}
defaultTasks 'bootRun'

bootWar {
   mainClassName = 'com.icthh.xm.ms.entity.EntityApp'
}

war {

}

springBoot {
    mainClassName = 'com.icthh.xm.ms.entity.EntityApp'
    buildInfo()
}

if (OperatingSystem.current().isWindows()) {
    // https://stackoverflow.com/questions/40037487/the-filename-or-extension-is-too-long-error-using-gradle
    task classpathJar(type: Jar) {
        dependsOn configurations.runtime
        appendix = 'classpath'

        doFirst {
            manifest {
                attributes 'Class-Path': configurations.runtime.files.collect {
                    it.toURI().toURL().toString().replaceFirst(/file:\/+/, '/').replaceAll(' ', '%20')
                }.join(' ')
            }
        }
    }

    bootRun {
        dependsOn classpathJar
        doFirst {
            classpath = files("$buildDir/classes/java/main", "$buildDir/resources/main", classpathJar.archivePath)
        }
    }
}

String [] testCategories = ['com.icthh.xm.ms.entity.AbstractSpringBootTest',
                            'com.icthh.xm.ms.entity.AbstractUnitTest',
                            'com.icthh.xm.ms.entity.AbstractWebMvcTest']

Closure testLoggingConf = {
    exceptionFormat = 'full'
    events "passed", "skipped", "failed"//, "standardError" //, "standardOut"
}

test {

    doFirst {
        println '!!! ATTENTION: start execution of non-categorized tests. it may impact test performance !!!'
    }

    exclude '**/CucumberTest*'
    dependsOn 'clean' , 'runCategorizedTests'
    classes.mustRunAfter 'clean'
    systemProperty "spring.profiles.active", "test"
    mkdir("src/test/features")
    include '**/*UnitTest*'
    include '**/*IntTest*'

    // to run all test that was not categorized
    useJUnit {
        excludeCategories(testCategories)
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = true
    testLogging testLoggingConf

    doLast{
        println '!!! ATTENTION: check if there are non-categorized tests !!!'
    }

}

task runCategorizedTests(type: Test) {
    useJUnit {
        includeCategories(testCategories)
    }
    testLogging testLoggingConf
}

task cucumberTest(type: Test) {
    description = "Execute cucumber BDD tests."
    group = "verification"
    include '**/CucumberTest*'

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

check.dependsOn cucumberTest

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task cucumberTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn cucumberTest
}

apply from: 'gradle/sonar.gradle'
apply from: 'gradle/liquibase.gradle'
apply from: 'gradle/gatling.gradle'
apply from: 'gradle/mapstruct.gradle'
apply from: 'gradle/docker.gradle'
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty('prod')) {
    apply from: 'gradle/profile_prod.gradle'
} else {
    apply from: 'gradle/profile_dev.gradle'
}


if (project.hasProperty('zipkin')) {
    apply from: 'gradle/zipkin.gradle'
}

if (!project.hasProperty('runList')) {
    project.ext.runList = 'main'
}

group = 'com.icthh.xm.ms.entity'
version = '0.0.1-SNAPSHOT'

description = ''

configurations {
    providedRuntime
    compile.exclude module: "spring-boot-starter-tomcat"
    // netty's native is pulled by spring-cloud-starter-ribbon, but is useless unless you explicitly add the native binary dependency.
    // Having it in the classpath without the binary can cause warnings
    all*.exclude group: 'io.netty', module: 'netty-transport-native-epoll'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {
    compile "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    compile group: "io.github.jhipster", name: "jhipster-framework"
    compile "org.springframework.boot:spring-boot-starter-cache"
    compile "io.dropwizard.metrics:metrics-core"
    compile "io.dropwizard.metrics:metrics-json"
    compile "io.dropwizard.metrics:metrics-jvm"
    compile "io.dropwizard.metrics:metrics-servlet"
    compile "io.dropwizard.metrics:metrics-servlets"
    compile "io.prometheus:simpleclient"
    compile "io.prometheus:simpleclient_dropwizard"
    compile "io.prometheus:simpleclient_servlet"
    compile "net.logstash.logback:logstash-logback-encoder"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_dataformat_csv_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    compile "com.fasterxml.jackson.core:jackson-annotations"
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner"
    compile "com.ryantenney.metrics:metrics-spring"
    compile "javax.cache:cache-api"
    compile "org.hibernate:hibernate-core"
    compile "com.zaxxer:HikariCP"
    compile "org.apache.commons:commons-lang3"
    compile "commons-io:commons-io"
    compile "javax.transaction:javax.transaction-api"
    compile "org.hibernate:hibernate-envers"
    compile "org.hibernate.validator:hibernate-validator"
    compile "org.hibernate:hibernate-entitymanager"
    compile "org.liquibase:liquibase-core"
    compile "com.mattbertolini:liquibase-slf4j"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-loader-tools"
    compile "org.springframework.boot:spring-boot-starter-mail"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-data-elasticsearch"
    // log4j needed to create embedded elasticsearch instance
    runtime "org.apache.logging.log4j:log4j-api:2.7"
    runtime "org.apache.logging.log4j:log4j-core:2.7"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.cloud:spring-cloud-starter"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-hystrix"
    compile "org.springframework.retry:spring-retry"
    compile "org.springframework.kafka:spring-kafka"
    compile "org.springframework.cloud:spring-cloud-starter-consul-discovery"
    compile "org.springframework.cloud:spring-cloud-starter-consul-config"
    compile "org.springframework.cloud:spring-cloud-security"
    compile "org.springframework.cloud:spring-cloud-starter-openfeign"
    compile "org.springframework.boot:spring-boot-starter-cloud-connectors"
    compile "org.springframework:spring-context-support"
    compile "org.springframework.security:spring-security-config"
    compile "org.springframework.security:spring-security-data"
    compile "org.springframework.security:spring-security-web"
    compile "org.springframework.security.oauth:spring-security-oauth2"
    compile "org.springframework.security:spring-security-jwt"
    compile ("io.springfox:springfox-swagger2") {
        exclude module: 'mapstruct'
    }
    compile "io.springfox:springfox-bean-validators"
    compile "org.postgresql:postgresql"
    compile "com.h2database:h2"
    compile "org.mapstruct:mapstruct-jdk8:${mapstruct_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    // XM custom dependencies
    compile ("com.github.java-json-tools:json-schema-validator:2.2.8") {
        exclude group: 'javax.mail', module: 'mailapi'
    }
    compile "com.amazonaws:aws-java-sdk-s3:1.11.158"
    compile "com.amazonaws:aws-java-sdk-core:1.11.158"
    annotationProcessor "com.elasticpath.json:json-unmarshaller:1.0.0"
    // "org.json:json" already present in org.apache.geronimo.bundles:json:20090211_1 dependency for jackson-datatype-json-org
    //compile "org.json:json:20160212" // for LinkedIn LEP
    compile "org.jsoup:jsoup:1.10.2" // for LinkedIn LEP
    compile "com.jayway.jsonpath:json-path"
    provided "com.elasticpath.json:json-unmarshaller:1.0.0"
    compile "com.mortennobel:java-image-scaling:0.8.6"
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    compile ("com.icthh.xm.commons:xm-commons-ms-web:${xm_commons_version}") {
        exclude group: "io.github.jhipster", module: "jhipster-framework"
    }
    compile "com.icthh.xm.commons:xm-commons-lep:${xm_commons_version}"
    compile "com.icthh.xm.commons:xm-commons-tenant-endpoint:${xm_commons_version}"
    compile "com.icthh.xm.commons:xm-commons-i18n:${xm_commons_version}"
    compile "com.icthh.xm.commons:xm-commons-timeline:${xm_commons_version}"
    compile "com.icthh.xm.commons:xm-commons-migration-db:${xm_commons_version}"
    compile "com.icthh.xm.commons:xm-commons-permission:${xm_commons_version}"
    compile "com.icthh.xm.commons:xm-commons-scheduler:${xm_commons_version}"
    compile "com.icthh.xm.commons:xm-commons-metric:${xm_commons_version}"

    compile "org.freemarker:freemarker:${freemarker_version}"
    compile "org.apache.poi:poi-ooxml:${apache_poi_version}"
    compile "org.modelmapper:modelmapper:${modelmapper_version}"
    //compile "org.springframework.boot:spring-boot-devtools"
    compile "com.github.bohnman:squiggly-filter-jackson:${squiggly_filter_version}"

    // XM custom dependencies end
    // fix scala MethodNotFoundException
    zinc 'com.typesafe.zinc:zinc:0.3.9'
    zinc 'org.scala-lang:scala-library:2.10.5'
    testCompile "org.springframework.cloud:spring-cloud-stream-test-support"
    testCompile "org.awaitility:awaitility:${awaitility_version}"
    testCompile "io.cucumber:cucumber-junit"
    testCompile "io.cucumber:cucumber-spring"
    testCompile ("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testCompile "org.springframework.security:spring-security-test"
    testCompile "org.springframework.boot:spring-boot-test"
    testCompile "org.assertj:assertj-core"
    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core"
    testCompile "com.mattbertolini:liquibase-slf4j"
    testCompile "org.hamcrest:hamcrest-library"
    testCompile "io.gatling.highcharts:gatling-charts-highcharts:${gatling_version}"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

checkstyle {
    toolVersion = "7.6.1"
    ignoreFailures = true
    configFile = rootProject.file('./qa/checkstyle.xml')
}

findbugs {
    toolVersion = '3.0.1'
    ignoreFailures = true
}

pmd {
    rulePriority = 3
    toolVersion = '5.5.4'
    ignoreFailures = true
    ruleSetFiles = files("./qa/pmd.xml")
}

task cleanResources(type: Delete) {
    delete 'build/resources'
}

wrapper {
    gradleVersion = '4.10.2'
}

task stage(dependsOn: 'bootWar') {
}

compileJava {
    dependsOn processResources
    // add method parameters names to .class (used by LEP scripts)
    options.compilerArgs << '-parameters'
}
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources
